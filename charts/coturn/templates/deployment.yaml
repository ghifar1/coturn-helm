{{- if and .Values.tls.enabled (not .Values.tls.secretName) -}}
  {{- fail "tls.enabled is true but tls.secretName is empty" -}}
{{- end -}}
{{- $configMapName := "" -}}
{{- if .Values.turnserver.existingConfigMap -}}
  {{- $configMapName = .Values.turnserver.existingConfigMap -}}
{{- else if .Values.turnserver.config -}}
  {{- $configMapName = printf "%s-config" (include "coturn.fullname" .) -}}
{{- end -}}
{{- $root := . -}}
{{- $args := concat .Values.turnserver.args .Values.turnserver.extraArgs -}}
{{- if .Values.tls.enabled -}}
  {{- $tlsArgs := list (printf "--cert=%s" .Values.tls.certFile) (printf "--pkey=%s" .Values.tls.keyFile) -}}
  {{- if .Values.tls.caCertFile -}}
    {{- $tlsArgs = concat $tlsArgs (list (printf "--ca-file=%s" .Values.tls.caCertFile)) -}}
  {{- end -}}
  {{- $args = concat $args $tlsArgs -}}
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "coturn.fullname" . }}
  labels:
    {{- include "coturn.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "coturn.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "coturn.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "coturn.serviceAccountName" . }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- else if .Values.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: coturn
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if $args }}
          args:
            {{- range $args }}
            - {{ tpl . $root | quote }}
            {{- end }}
          {{- end }}
          {{- with .Values.turnserver.extraEnv }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.turnserver.extraEnvFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: 3478
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: 3478
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if $configMapName }}
            - name: config
              mountPath: /etc/coturn/turnserver.conf
              subPath: turnserver.conf
              readOnly: true
            {{- end }}
            - name: data
              mountPath: {{ .Values.turnserver.dataDir }}
            {{- if .Values.tls.enabled }}
            - name: tls
              mountPath: {{ .Values.tls.mountPath }}
              readOnly: true
            {{- end }}
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        {{- if $configMapName }}
        - name: config
          configMap:
            name: {{ $configMapName }}
        {{- end }}
        - name: data
          {{- if .Values.turnserver.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.turnserver.persistence.existingClaim }}{{ .Values.turnserver.persistence.existingClaim }}{{ else }}{{ include "coturn.fullname" . }}-data{{ end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.tls.enabled }}
        - name: tls
          secret:
            secretName: {{ .Values.tls.secretName }}
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
